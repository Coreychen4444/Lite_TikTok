version: '3' 
# 指定 docker-compose 文件的版本。有多个版本，每个版本都有其特点和差异，常见的是 '3' 或 '2'。

services: 
# 定义要启动的一组服务。每个服务都可以是一个容器。

  lite_tiktok: 
  # 服务名。这个名字可以用作网络中的主机名来从其他服务访问这个服务。
  
    build: . 
    # 指定 Dockerfile 的位置来构建镜像。在这里，"." 表示 Dockerfile 位于当前目录。
    image: coreychen4444/lite_tiktok:v2
    ports:
      - "8080:8080"
    # 映射容器的端口到宿主机的端口。格式为 "宿主机端口:容器端口"。

    depends_on:
      - mysql
      - redis
    # 定义服务的依赖。这确保在启动 webapp 之前先启动 mysql 和 redis 服务。

    environment:
      - MYSQL_HOST=mysql
      - REDIS_HOST=redis
    # 设置环境变量。这些变量可以在你的应用代码中使用。

  mysql:
    image: mysql:latest
    # 使用一个预先构建的镜像，而不是使用 Dockerfile 构建。这里我们使用了最新的 MySQL 镜像。
    
    environment:
      MYSQL_ROOT_PASSWORD: 44447777
      MYSQL_DATABASE: tiktok_db
      MYSQL_USER: user
      MYSQL_PASSWORD: 1234567
    # MySQL 镜像特定的环境变量，用于设置 root 密码、数据库名称、用户和用户密码等。

    volumes:
      - mysql-data:/var/lib/mysql
    # 将容器内的数据持久化到一个命名的卷。这确保即使容器被删除，数据也会被保留。

  redis:
    image: redis:latest
    # 使用一个预先构建的镜像，这里是最新的 Redis 镜像。

    volumes:
      - redis-data:/data
    # 与上面的 MySQL 服务相似，将数据持久化到一个命名的卷。

volumes:
  mysql-data:
  redis-data:
# 定义命名的卷。这些卷用于数据的持久化。
